/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.ala.gui;

import com.mycompany.ala.dao.DaoFactory;
import com.mycompany.ala.dao.MaterialDao;
import com.mycompany.ala.dao.OrderServiceDao;
import com.mycompany.ala.dao.ReservDao;
import com.mycompany.ala.entities.OrderService;
import com.mycompany.ala.entities.RequestMaterial;
import com.mycompany.ala.entities.Reserv;
import com.mycompany.ala.entities.Structure;
import com.mycompany.ala.enums.ExpenditureType;

import com.mycompany.ala.enums.OrderServiceFormType;
import com.mycompany.ala.enums.ServiceType;
import com.mycompany.ala.enums.StatusService;
import com.mycompany.ala.exceptions.DbException;
import com.mycompany.ala.models.ProgTableModel;
import com.mycompany.ala.models.RequestTableModel;
import com.mycompany.ala.models.ReservTableModel;
import com.mycompany.ala.services.CompareAndUpdateOrderService;
import com.mycompany.ala.services.DataChangeListener;
import com.mycompany.ala.services.ImportServicesFromFile;
import com.mycompany.ala.util.DoubleConstraint;
import com.mycompany.ala.util.JSpinnerListener;
import com.mycompany.ala.util.MaxLengthConstraint;
import com.mycompany.ala.util.OnlyAlphCharConstraint;
import com.mycompany.ala.util.OnlyIntNumberConstraint;
import com.mycompany.ala.util.UpperCaseConstraint;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.text.SimpleDateFormat;
import java.util.ArrayList;

import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

import javax.swing.JSpinner;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;

import javax.swing.SpinnerDateModel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

/**
 *
 * @author Abimael
 */
public class OrderServiceFormView extends javax.swing.JFrame implements DataChangeListener<Object> {

    private static SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
    private DataChangeListener listener;
    private OrderService os;
    private OrderServiceFormType type = null;
    private ProgTableModel progTableModel = new ProgTableModel();
    private RequestTableModel requestTableModel = new RequestTableModel();
    private ReservTableModel reservTableModel = new ReservTableModel();
    private OrderServiceDao osDao = DaoFactory.createOrderServiceDao();
    private ReservDao reservDao = DaoFactory.createReservDao();

    /**
     * Creates new form OrderServiceFormView
     */
    public OrderServiceFormView(OrderService os, OrderServiceFormType type) {
        initComponents();
        configTables(os);
        configFields();
        setMode(type);
        this.os = os;
        this.type = type;
        if (os != null) {
            if (os.getStatusService() == StatusService.ENCERRADO) {
                setMode(OrderServiceFormType.CLOSE_MODE);
            } else if (os.isEmbarg()) {
                setMode(OrderServiceFormType.EMBARG_MODE);
            } else {
                setMode(type);
            }
            loadRequestMaterialList(os);
        }
        fillFields(os);
    }

    public void subscribeChangeListener(DataChangeListener listener) {
        this.listener = listener;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        lblRegisterDate = new javax.swing.JLabel();
        txtId = new javax.swing.JTextField();
        txtLote = new javax.swing.JTextField();
        txtR = new javax.swing.JTextField();
        lblEmbarg = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        txtFiscal = new javax.swing.JTextField();
        btnLog = new javax.swing.JButton();
        txtAlim = new javax.swing.JTextField();
        txtObjTec = new javax.swing.JTextField();
        txtLocal = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtKm = new javax.swing.JTextField();
        comboBoxType = new javax.swing.JComboBox<>();
        comboBoxExpenditure = new javax.swing.JComboBox<>();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        comboBoxStatus = new javax.swing.JComboBox<>();
        jLabel17 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        btnEdit = new javax.swing.JButton();
        Date date = new Date();
        SpinnerDateModel sm = new SpinnerDateModel(date, null, null, Calendar.DAY_OF_YEAR);
        spinnerCreateDate = new javax.swing.JSpinner(sm);
        cbCreateDate = new javax.swing.JCheckBox();
        SpinnerDateModel smConclusion = new SpinnerDateModel(date, null, null, Calendar.DAY_OF_YEAR);
        spinnerConclusion = new javax.swing.JSpinner(smConclusion);
        txtReserv = new javax.swing.JTextField();
        btnAddReserv = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        txtCity = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        lblCloseDate = new javax.swing.JLabel();
        lblIdError = new javax.swing.JLabel();
        lblRError = new javax.swing.JLabel();
        lblLoteError = new javax.swing.JLabel();
        lblReservError = new javax.swing.JLabel();
        lblCityError = new javax.swing.JLabel();
        lblFiscalError = new javax.swing.JLabel();
        lblAlimError = new javax.swing.JLabel();
        lblObjTecError = new javax.swing.JLabel();
        lblLocalError = new javax.swing.JLabel();
        lblKmError = new javax.swing.JLabel();
        lblTypeError = new javax.swing.JLabel();
        lblExpenditureError = new javax.swing.JLabel();
        txtBase = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        lblBaseError = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tbReserv = new javax.swing.JTable();
        btnMaterialRequest = new javax.swing.JButton();
        btnNewProg = new javax.swing.JButton();
        btnProgEdit = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        tbProg = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        tbMaterialRequest = new javax.swing.JTable();
        btnRemoveReserv = new javax.swing.JButton();
        btnExportRequest = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jLabel20 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        taDescript = new javax.swing.JTextArea();
        lblDescriptError = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(60, 60, 60));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jPanel1.setBackground(new java.awt.Color(200, 200, 200));
        jPanel1.setForeground(new java.awt.Color(200, 200, 200));

        jLabel1.setBackground(new java.awt.Color(0, 0, 0));
        jLabel1.setForeground(new java.awt.Color(100, 100, 100));
        jLabel1.setText("Id");

        jLabel4.setBackground(new java.awt.Color(0, 0, 0));
        jLabel4.setForeground(new java.awt.Color(100, 100, 100));
        jLabel4.setText("Lote");

        jLabel6.setBackground(new java.awt.Color(0, 0, 0));
        jLabel6.setForeground(new java.awt.Color(100, 100, 100));
        jLabel6.setText("Registrado em: ");

        lblRegisterDate.setBackground(new java.awt.Color(0, 0, 0));
        lblRegisterDate.setForeground(new java.awt.Color(100, 100, 100));
        lblRegisterDate.setText("01/01/0001");

        txtId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIdActionPerformed(evt);
            }
        });

        txtLote.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtLoteActionPerformed(evt);
            }
        });

        txtR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtRActionPerformed(evt);
            }
        });

        lblEmbarg.setBackground(new java.awt.Color(0, 0, 0));
        lblEmbarg.setForeground(new java.awt.Color(255, 0, 0));

        jLabel21.setBackground(new java.awt.Color(0, 0, 0));
        jLabel21.setForeground(new java.awt.Color(100, 100, 100));
        jLabel21.setText("Fiscal");

        txtFiscal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFiscalActionPerformed(evt);
            }
        });

        btnLog.setBackground(new java.awt.Color(60, 60, 60));
        btnLog.setForeground(new java.awt.Color(200, 200, 200));
        btnLog.setText("Log");

        txtAlim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAlimActionPerformed(evt);
            }
        });

        txtObjTec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtObjTecActionPerformed(evt);
            }
        });

        txtLocal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtLocalActionPerformed(evt);
            }
        });

        jLabel9.setBackground(new java.awt.Color(0, 0, 0));
        jLabel9.setForeground(new java.awt.Color(100, 100, 100));
        jLabel9.setText("Local");

        jLabel5.setBackground(new java.awt.Color(0, 0, 0));
        jLabel5.setForeground(new java.awt.Color(100, 100, 100));
        jLabel5.setText("Km");

        txtKm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtKmActionPerformed(evt);
            }
        });

        comboBoxType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " ", "DEFEITO", "ENCAIXE", "ESTRUTURAL", "MELHORIA", "NDS", "PODA", "TERMOGRÁFICA", "RECLAMAÇÃO_DE_TENSÃO" }));
        comboBoxType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxTypeActionPerformed(evt);
            }
        });

        comboBoxExpenditure.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "CUSTEIO", "INVESTIMENTO" }));

        jLabel15.setBackground(new java.awt.Color(0, 0, 0));
        jLabel15.setForeground(new java.awt.Color(100, 100, 100));
        jLabel15.setText("Tipo");

        jLabel16.setBackground(new java.awt.Color(0, 0, 0));
        jLabel16.setForeground(new java.awt.Color(100, 100, 100));
        jLabel16.setText("Faturamento");

        comboBoxStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "REGISTRADO", "CONTRATADO", "PROGRAMADO", "INICIADO", "CONCLUIDO", "ATUALIZADO", "PROTOCOLADO", "ENCERRADO" }));

        jLabel17.setBackground(new java.awt.Color(0, 0, 0));
        jLabel17.setForeground(new java.awt.Color(100, 100, 100));
        jLabel17.setText("Conclusão");

        jLabel22.setBackground(new java.awt.Color(0, 0, 0));
        jLabel22.setForeground(new java.awt.Color(100, 100, 100));
        jLabel22.setText("Status");

        btnEdit.setBackground(new java.awt.Color(60, 60, 60));
        btnEdit.setForeground(new java.awt.Color(200, 200, 200));
        btnEdit.setText("Editar");
        btnEdit.setFocusable(false);
        btnEdit.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnEdit.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        JSpinner.DateEditor de = new JSpinner.DateEditor(spinnerCreateDate, "dd/MM/yyyy");
        //de.getTextField().setFocusable(false);

        spinnerCreateDate.setEditor(de);
        spinnerCreateDate.setEnabled(false);

        cbCreateDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbCreateDateActionPerformed(evt);
            }
        });

        //de.getTextField().setFocusable(false);
        JSpinner.DateEditor deConclusion = new JSpinner.DateEditor(spinnerConclusion, "dd/MM/yyyy");
        spinnerConclusion.setEditor(deConclusion);
        spinnerConclusion.setEnabled(false);

        txtReserv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtReservActionPerformed(evt);
            }
        });

        btnAddReserv.setBackground(new java.awt.Color(60, 60, 60));
        btnAddReserv.setForeground(new java.awt.Color(200, 200, 200));
        btnAddReserv.setText("Add");
        btnAddReserv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddReservActionPerformed(evt);
            }
        });

        jLabel11.setBackground(new java.awt.Color(0, 0, 0));
        jLabel11.setForeground(new java.awt.Color(100, 100, 100));
        jLabel11.setText("Reserva");

        txtCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCityActionPerformed(evt);
            }
        });

        jLabel24.setBackground(new java.awt.Color(0, 0, 0));
        jLabel24.setForeground(new java.awt.Color(100, 100, 100));
        jLabel24.setText("Município");

        jLabel7.setBackground(new java.awt.Color(0, 0, 0));
        jLabel7.setForeground(new java.awt.Color(100, 100, 100));
        jLabel7.setText("Encerrado em: ");

        lblCloseDate.setBackground(new java.awt.Color(0, 0, 0));
        lblCloseDate.setForeground(new java.awt.Color(100, 100, 100));
        lblCloseDate.setText("01/01/0001");

        lblIdError.setName("lblIdError");
        lblIdError.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        lblIdError.setForeground(new java.awt.Color(255, 0, 0));

        lblRError.setName("lblRError");
        lblRError.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        lblRError.setForeground(new java.awt.Color(255, 0, 0));

        lblLoteError.setName("lblLoteError");
        lblLoteError.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        lblLoteError.setForeground(new java.awt.Color(255, 0, 0));

        lblReservError.setName("lblReservError");
        lblReservError.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        lblReservError.setForeground(new java.awt.Color(255, 0, 0));

        lblCityError.setName("lblCityError");
        lblCityError.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        lblCityError.setForeground(new java.awt.Color(255, 0, 0));

        lblFiscalError.setName("lblFiscalError");
        lblFiscalError.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        lblFiscalError.setForeground(new java.awt.Color(255, 0, 0));

        lblAlimError.setName("lblAlimError");
        lblAlimError.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        lblAlimError.setForeground(new java.awt.Color(255, 0, 0));

        lblObjTecError.setName("lblObjTecError");
        lblObjTecError.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        lblObjTecError.setForeground(new java.awt.Color(255, 0, 0));

        lblLocalError.setName("lblLocalError");
        lblLocalError.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        lblLocalError.setForeground(new java.awt.Color(255, 0, 0));

        lblKmError.setName("lblKmError");
        lblKmError.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        lblKmError.setForeground(new java.awt.Color(255, 0, 0));

        lblTypeError.setName("lblTypeError");
        lblTypeError.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        lblTypeError.setForeground(new java.awt.Color(255, 0, 0));

        lblExpenditureError.setName("lblExpenditureError");
        lblExpenditureError.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        lblExpenditureError.setForeground(new java.awt.Color(255, 0, 0));

        txtBase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBaseActionPerformed(evt);
            }
        });

        jLabel25.setBackground(new java.awt.Color(0, 0, 0));
        jLabel25.setForeground(new java.awt.Color(100, 100, 100));
        jLabel25.setText("Base");

        lblBaseError.setName("lblBaseError");
        lblBaseError.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        lblBaseError.setForeground(new java.awt.Color(255, 0, 0));

        jLabel18.setBackground(new java.awt.Color(0, 0, 0));
        jLabel18.setForeground(new java.awt.Color(100, 100, 100));
        jLabel18.setText("Criado em");

        jLabel10.setBackground(new java.awt.Color(0, 0, 0));
        jLabel10.setForeground(new java.awt.Color(100, 100, 100));
        jLabel10.setText("Projeto (R)");

        jLabel3.setBackground(new java.awt.Color(0, 0, 0));
        jLabel3.setForeground(new java.awt.Color(100, 100, 100));
        jLabel3.setText("Alimentador");

        jLabel8.setBackground(new java.awt.Color(0, 0, 0));
        jLabel8.setForeground(new java.awt.Color(100, 100, 100));
        jLabel8.setText("Obj. Tec.");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnLog)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnEdit))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel7)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lblCloseDate, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lblRegisterDate)))
                                .addGap(51, 51, 51)
                                .addComponent(lblEmbarg, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(jPanel1Layout.createSequentialGroup()
                                                    .addGap(16, 16, 16)
                                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jLabel25, javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addComponent(jLabel24, javax.swing.GroupLayout.Alignment.TRAILING)))
                                                .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.TRAILING))
                                            .addComponent(jLabel18, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.TRAILING))
                                        .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING))
                                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel21, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(txtLocal, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtObjTec, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtAlim, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtFiscal, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtKm, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblKmError, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lblFiscalError, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lblAlimError, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lblObjTecError, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lblLocalError, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                            .addComponent(txtR)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(lblRError, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addComponent(txtReserv, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(btnAddReserv)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(lblReservError, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(txtCity, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                                            .addComponent(txtBase))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblCityError, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lblBaseError, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lblIdError, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(1, 1, 1)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(spinnerCreateDate, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(cbCreateDate, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(txtLote, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(lblLoteError, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jLabel17))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel16, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel15, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel22, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(spinnerConclusion, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(comboBoxType, 0, 1, Short.MAX_VALUE)
                            .addComponent(comboBoxExpenditure, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(comboBoxStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblTypeError, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblExpenditureError, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(lblRegisterDate))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(lblCloseDate)))
                    .addComponent(lblEmbarg, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblIdError, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel1)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(spinnerCreateDate, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel18)))
                    .addComponent(cbCreateDate, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblLoteError, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtLote, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4)))
                .addGap(8, 8, 8)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblRError, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtR, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel10)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblReservError, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtReserv, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnAddReserv, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel11)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtBase, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel25))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtCity, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel24)
                            .addComponent(lblCityError, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(lblBaseError, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtFiscal, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblFiscalError, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel21))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtAlim, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblAlimError, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtObjTec, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblObjTecError, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtLocal, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblLocalError, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtKm, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel5))
                    .addComponent(lblKmError, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTypeError, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(comboBoxType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel15)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(comboBoxExpenditure, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel16))
                    .addComponent(lblExpenditureError, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboBoxStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel22))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(spinnerConclusion, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 62, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnLog, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanel5.setBackground(new java.awt.Color(200, 200, 200));

        tbReserv.setBackground(new java.awt.Color(200, 200, 255));
        tbReserv.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(tbReserv);

        btnMaterialRequest.setBackground(new java.awt.Color(60, 60, 60));
        btnMaterialRequest.setForeground(new java.awt.Color(200, 200, 200));
        btnMaterialRequest.setText("Requisitar");
        btnMaterialRequest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMaterialRequestActionPerformed(evt);
            }
        });

        btnNewProg.setBackground(new java.awt.Color(60, 60, 60));
        btnNewProg.setForeground(new java.awt.Color(200, 200, 200));
        btnNewProg.setText("Programar");

        btnProgEdit.setBackground(new java.awt.Color(60, 60, 60));
        btnProgEdit.setForeground(new java.awt.Color(200, 200, 200));
        btnProgEdit.setText("Editar");

        tbProg.setBackground(new java.awt.Color(200, 255, 200));
        tbProg.setForeground(new java.awt.Color(200, 200, 255));
        tbProg.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(tbProg);

        tbMaterialRequest.setBackground(new java.awt.Color(200, 255, 230));
        tbMaterialRequest.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane5.setViewportView(tbMaterialRequest);

        btnRemoveReserv.setBackground(new java.awt.Color(60, 60, 60));
        btnRemoveReserv.setForeground(new java.awt.Color(200, 200, 200));
        btnRemoveReserv.setText("Remover");
        btnRemoveReserv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveReservActionPerformed(evt);
            }
        });

        btnExportRequest.setBackground(new java.awt.Color(60, 60, 60));
        btnExportRequest.setForeground(new java.awt.Color(200, 200, 200));
        btnExportRequest.setText("Exportar");
        btnExportRequest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportRequestActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(btnNewProg, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnProgEdit)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnRemoveReserv))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(btnMaterialRequest)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnExportRequest))
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 535, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnNewProg, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnProgEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnMaterialRequest, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRemoveReserv, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnExportRequest, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 211, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel6.setBackground(new java.awt.Color(200, 200, 200));

        jLabel20.setBackground(new java.awt.Color(0, 0, 0));
        jLabel20.setForeground(new java.awt.Color(100, 100, 100));
        jLabel20.setText("Descrição");

        taDescript.setColumns(20);
        taDescript.setRows(5);
        jScrollPane2.setViewportView(taDescript);

        lblExpenditureError.setName("lblExpenditureError");
        lblDescriptError.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        lblDescriptError.setForeground(new java.awt.Color(255, 0, 0));

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jScrollPane2)
                        .addContainerGap())
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel20)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblDescriptError, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel20)
                    .addComponent(lblDescriptError, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void txtCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCityActionPerformed

    private void btnAddReservActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddReservActionPerformed
        String reservId = txtReserv.getText().trim();
        try {
            if (reservId.matches("\\d{6,9}")) {
                Reserv reserv = reservDao.findReservById(reservId);
                reservTableModel.onDataChange(reserv);
                txtReserv.setText("");
                lblReservError.setText("");
            } else {
                lblReservError.setText("*");
            }
        } catch (DbException e) {
            JOptionPane.showMessageDialog(this, null, "Falha na comunicação com o banco de dados: " + e.getMessage(), JOptionPane.ERROR);
        }
    }//GEN-LAST:event_btnAddReservActionPerformed

    private void txtReservActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtReservActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtReservActionPerformed

    private void cbCreateDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbCreateDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbCreateDateActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        if (type == OrderServiceFormType.CONSULT_MODE || type == OrderServiceFormType.EMBARG_MODE) {
            setMode(OrderServiceFormType.EDIT_MODE);
        } else if (validateFields()) {
            OrderService newOs = instantiateOrderService();
            if (type == OrderServiceFormType.EDIT_MODE) {
                CompareAndUpdateOrderService cpOs = new CompareAndUpdateOrderService(this, this.os, newOs);
                if (this.listener != null) {
                    cpOs.subscribeDataChangeListener(this.listener);
                }
                cpOs.run();
                this.os = newOs;
                if (newOs.getStatusService() == StatusService.ENCERRADO) {
                    lblCloseDate.setText(sdf.format(newOs.getCloseDate()));
                    setMode(OrderServiceFormType.CLOSE_MODE);
                } else if (newOs.isEmbarg()) {
                    setMode(OrderServiceFormType.EMBARG_MODE);
                } else {
                    setMode(OrderServiceFormType.CONSULT_MODE);
                }
            } else if (type == OrderServiceFormType.NEW) {
                if (newOs != null) {
                    this.os = newOs;
                    if (insertOrderService(newOs) > 0) {
                        if (newOs.getStatusService() == StatusService.ENCERRADO) {
                            lblCloseDate.setText(sdf.format(newOs.getCloseDate()));
                            setMode(OrderServiceFormType.CLOSE_MODE);
                        } else {
                            setMode(OrderServiceFormType.CONSULT_MODE);
                            JOptionPane.showMessageDialog(this, "Registrado!");
                            if (this.listener != null) {
                                this.listener.onDataChange(null);
                            }
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, null, "Falha ao registrar serviço.", JOptionPane.ERROR);
                    }
                }
                lblRegisterDate.setText(sdf.format(newOs.getRegisterDate()));
            }
        }
    }//GEN-LAST:event_btnEditActionPerformed

    private void comboBoxTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxTypeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboBoxTypeActionPerformed

    private void txtKmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtKmActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtKmActionPerformed

    private void txtLocalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtLocalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtLocalActionPerformed

    private void txtObjTecActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtObjTecActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtObjTecActionPerformed

    private void txtAlimActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAlimActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAlimActionPerformed

    private void txtFiscalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFiscalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFiscalActionPerformed

    private void txtRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtRActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtRActionPerformed

    private void txtLoteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtLoteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtLoteActionPerformed

    private void txtIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIdActionPerformed

    private void txtBaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBaseActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBaseActionPerformed

    private void btnRemoveReservActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveReservActionPerformed
        if (tbReserv.getSelectedRow() != -1)
            reservTableModel.removeReserv(tbReserv.getSelectedRow());
        else
            JOptionPane.showMessageDialog(this, "Reserva não selecionada !");
    }//GEN-LAST:event_btnRemoveReservActionPerformed

    private void btnMaterialRequestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMaterialRequestActionPerformed
        createMaterialRequestView(this);
    }//GEN-LAST:event_btnMaterialRequestActionPerformed

    private void btnExportRequestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportRequestActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnExportRequestActionPerformed

    public void setMode(OrderServiceFormType type) {
        this.type = type;
        switch (type) {
            case CONSULT_MODE:
                txtReserv.setText("");
                txtId.setEditable(false);
                enabledComponents(false);
                for (Component t : ((JPanel) getRootPane().getContentPane().getComponents()[0]).getComponents()) {
                    if (t.getName() != null) {
                        if (t.getName().trim().matches("lbl[A-Za-z]+Error")) {
                            ((JLabel) t).setText("");
                        }
                    }
                }
                spinnerCreateDate.setEnabled(false);
                spinnerConclusion.setEnabled(false);
                btnNewProg.setEnabled(true);
                btnProgEdit.setEnabled(true);
                btnMaterialRequest.setEnabled(true);
                btnEdit.setText("Editar");
                break;
            case EDIT_MODE:
                txtId.setEditable(false);
                enabledComponents(true);
                btnMaterialRequest.setEnabled(false);
                btnNewProg.setEnabled(false);
                btnProgEdit.setEnabled(false);
                btnEdit.setText("Confirmar");
                break;
            case NEW:
                reservTableModel.setReservList(new ArrayList<>());
                btnEdit.setText("Confirmar");
                btnMaterialRequest.setEnabled(false);
                btnNewProg.setEnabled(false);
                btnProgEdit.setEnabled(false);
                btnLog.setEnabled(false);
                lblRegisterDate.setText("");
                lblCloseDate.setText("");
                break;
            case EMBARG_MODE:
                txtReserv.setText("");
                txtId.setEditable(false);
                enabledComponents(false);
                btnMaterialRequest.setEnabled(true);
                spinnerConclusion.setEnabled(false);
                btnNewProg.setEnabled(false);
                btnProgEdit.setEnabled(false);
                btnEdit.setText("Editar");
                break;
            case CLOSE_MODE:
                txtReserv.setText("");
                txtId.setEditable(false);
                enabledComponents(false);
                spinnerCreateDate.setEnabled(false);
                btnMaterialRequest.setEnabled(false);
                spinnerConclusion.setEnabled(false);
                btnNewProg.setEnabled(false);
                btnProgEdit.setEnabled(false);
                btnEdit.setEnabled(false);
                break;
            default:
        }
    }

    private void enabledComponents(boolean enabled) {
        txtLote.setEditable(enabled);
        txtLote.setFocusable(enabled);
        txtR.setEditable(enabled);
        txtR.setFocusable(enabled);
        txtReserv.setEnabled(enabled);
        txtReserv.setFocusable(enabled);
        btnAddReserv.setEnabled(enabled);
        btnRemoveReserv.setEnabled(enabled);
        cbCreateDate.setEnabled(enabled);
        txtBase.setEditable(enabled);
        txtBase.setFocusable(enabled);
        txtCity.setEditable(enabled);
        txtCity.setFocusable(enabled);
        txtFiscal.setEditable(enabled);
        txtFiscal.setFocusable(enabled);
        txtAlim.setEditable(enabled);
        txtAlim.setFocusable(enabled);
        txtObjTec.setEditable(enabled);
        txtObjTec.setFocusable(enabled);
        txtLocal.setEditable(enabled);
        txtLocal.setFocusable(enabled);
        txtKm.setEditable(enabled);
        txtKm.setFocusable(enabled);
        comboBoxType.setEditable(enabled);
        comboBoxType.setEnabled(enabled);
        comboBoxExpenditure.setEnabled(enabled);
        comboBoxStatus.setEnabled(enabled);
        taDescript.setEditable(enabled);
        taDescript.setFocusable(enabled);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OrderServiceFormView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OrderServiceFormView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OrderServiceFormView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OrderServiceFormView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new OrderServiceFormView(null, OrderServiceFormType.NEW).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddReserv;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnExportRequest;
    private javax.swing.JButton btnLog;
    private javax.swing.JButton btnMaterialRequest;
    private javax.swing.JButton btnNewProg;
    private javax.swing.JButton btnProgEdit;
    private javax.swing.JButton btnRemoveReserv;
    private javax.swing.JCheckBox cbCreateDate;
    private javax.swing.JComboBox<String> comboBoxExpenditure;
    private javax.swing.JComboBox<String> comboBoxStatus;
    private javax.swing.JComboBox<String> comboBoxType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JLabel lblAlimError;
    private javax.swing.JLabel lblBaseError;
    private javax.swing.JLabel lblCityError;
    private javax.swing.JLabel lblCloseDate;
    private javax.swing.JLabel lblDescriptError;
    private javax.swing.JLabel lblEmbarg;
    private javax.swing.JLabel lblExpenditureError;
    private javax.swing.JLabel lblFiscalError;
    private javax.swing.JLabel lblIdError;
    private javax.swing.JLabel lblKmError;
    private javax.swing.JLabel lblLocalError;
    private javax.swing.JLabel lblLoteError;
    private javax.swing.JLabel lblObjTecError;
    private javax.swing.JLabel lblRError;
    private javax.swing.JLabel lblRegisterDate;
    private javax.swing.JLabel lblReservError;
    private javax.swing.JLabel lblTypeError;
    private javax.swing.JSpinner spinnerConclusion;
    private javax.swing.JSpinner spinnerCreateDate;
    private javax.swing.JTextArea taDescript;
    private javax.swing.JTable tbMaterialRequest;
    private javax.swing.JTable tbProg;
    private javax.swing.JTable tbReserv;
    private javax.swing.JTextField txtAlim;
    private javax.swing.JTextField txtBase;
    private javax.swing.JTextField txtCity;
    private javax.swing.JTextField txtFiscal;
    private javax.swing.JTextField txtId;
    private javax.swing.JTextField txtKm;
    private javax.swing.JTextField txtLocal;
    private javax.swing.JTextField txtLote;
    private javax.swing.JTextField txtObjTec;
    private javax.swing.JTextField txtR;
    private javax.swing.JTextField txtReserv;
    // End of variables declaration//GEN-END:variables

    private void fillFields(OrderService os) {
        if (os != null) {
            lblRegisterDate.setText(sdf.format(os.getRegisterDate()));
            if (os.getCloseDate() != null) {
                lblCloseDate.setText(sdf.format(os.getCloseDate()));
            } else {
                lblCloseDate.setText("");
            }

            if (os.isEmbarg()) {
                lblEmbarg.setText("EMBARGADO");
            }
            txtId.setText(os.getId());

            if (os.getLote() != null && os.getLote().trim().length() > 0 && os.getLote().trim().matches("[+-]?\\d*(\\.\\d+)?")) {
                txtLote.setText(String.valueOf(Integer.parseInt(os.getLote().trim())));
            }
            if (os.getR() != null && os.getR().trim().matches("[+-]?\\d*(\\.\\d+)?")) {
                txtR.setText(os.getR());
            }

            if (os.getCreateDate() != null) {
                cbCreateDate.setSelected(true);
                spinnerCreateDate.setEnabled(true);
                spinnerCreateDate.setValue(os.getCreateDate());
                spinnerCreateDate.setEnabled(false);

            }
            if (os.getBase() != null && os.getBase().trim().length() > 0) {
                txtBase.setText(os.getBase());
            }
            if (os.getCity() != null && os.getCity().trim().length() > 0) {
                txtCity.setText(os.getCity());
            }
            if (os.getFiscal() != null) {
                txtFiscal.setText(os.getFiscal());
            }
            if (os.getAlim() != null) {
                txtAlim.setText(os.getAlim());
            }
            if (os.getTechnicalObject() != null) {
                txtObjTec.setText(os.getTechnicalObject());
            }
            if (os.getLocal() != null) {
                txtLocal.setText(os.getLocal());
            }
            if (os.getUnlockKm() != null) {
                txtKm.setText(String.valueOf(os.getUnlockKm()));
            }
            if (os.getServiceType() != null) {
                comboBoxType.setSelectedItem(String.valueOf(os.getServiceType()));
            }
            if (os.getExpenditureType() != null) {
                comboBoxExpenditure.setSelectedItem(String.valueOf(os.getExpenditureType()));
            }
            comboBoxStatus.setSelectedItem(String.valueOf(os.getStatusService()));
            if (os.getConclusionDate() != null) {
                spinnerConclusion.setValue(os.getConclusionDate());
            }

            if (os.getDescription() != null && os.getDescription().trim().length() > 0) {
                taDescript.setText(os.getDescription());
            }
        }
    }

    private boolean validateFields() {
        boolean validId, validR = false, validBase, validCity, validFiscal, validAlim, validObjTec,
                validLocal, validKm, validType = false, validExpenditure = false, validDescript, validClose = true;

        lblReservError.setText("");

        String id = txtId.getText();

        if (id.trim().matches("(E(MPM|GDT)|OO(ET|AO|SR)) ([\\d]{2,5}|[1-9])/20[\\d]{2}")) {
            if ((Integer.parseInt(id.substring(4).trim().split("/")[0]) > 0)) {
                lblIdError.setText("");
                validId = true;
            } else {
                lblIdError.setText("*");
                validId = false;
            }
        } else {
            lblIdError.setText("*");
            validId = false;
        }
        String lote = txtLote.getText();
        String r = txtR.getText();
        if (r.trim().length() > 0) {
            if (!r.trim().matches("\\d{6,}")) {
                lblRError.setText("*");
                validR = false;
            } else {
                lblRError.setText("");
                validR = true;
            }
        }
        String createDate = "";

        if (cbCreateDate.isSelected()) {
            createDate = sdf.format((Date) spinnerCreateDate.getValue());
            if (!createDate.trim().matches("(0[1-9]|[12][0-9]|3[01])/(0[1-9]|1[0-2])/(20\\d{2})")) {
                return false;
            }
        }

        String base = txtBase.getText();
        if (base.trim().length() < 4) {
            lblBaseError.setText("*");
            validBase = false;
        } else {
            lblBaseError.setText("");
            validBase = true;
        }

        String city = txtCity.getText();
        if (city.trim().length() < 4) {
            lblCityError.setText("*");
            validCity = false;
        } else {
            lblCityError.setText("");
            validCity = true;
        }

        String fiscal = txtFiscal.getText();
        if (!fiscal.trim().matches("[A-Za-z0-9]+[.-_]?[A-Za-z0-9]+@\\w+\\.\\w{2,3}(\\.\\w{2})?")) {
            lblFiscalError.setText("*");
            validFiscal = false;
        } else {
            lblFiscalError.setText("");
            validFiscal = true;
        }

        String alim = txtAlim.getText();
        if (!alim.trim().matches("\\w{3}-0[12]\\w[1-9]")) {
            lblAlimError.setText("*");
            validAlim = false;
        } else {
            lblAlimError.setText("");
            validAlim = true;
        }

        String objTec = txtObjTec.getText();
        if (objTec.trim().length() < 5) {
            lblObjTecError.setText("*");
            validObjTec = false;
        } else {
            lblObjTecError.setText("");
            validObjTec = true;
        }

        String local = txtLocal.getText();
        if (local.trim().length() < 5) {
            lblLocalError.setText("*");
            validLocal = false;
        } else {
            lblLocalError.setText("");
            validLocal = true;
        }

        String km = txtKm.getText();
        if (!km.trim().matches("\\d{1,3}(.\\d{1,4})?")) {
            lblKmError.setText("*");
            validKm = false;
        } else {
            lblKmError.setText("");
            validKm = true;
        }

        String type = comboBoxType.getSelectedItem().toString();

        if (type.trim().equals("")) {
            lblTypeError.setText("*");
            validType = false;
        } else if (type.toUpperCase().trim().equals("MELHORIA") && r.trim().length() < 6) {
            lblRError.setText("*");
            lblTypeError.setText("");
            validR = false;
            validType = true;
        } else {
            lblRError.setText("");
            lblTypeError.setText("");
            validR = true;
            validType = true;
        }

        String expenditureType = comboBoxExpenditure.getSelectedItem().toString();
        if (expenditureType.trim().toUpperCase().equals("INVESTIMENTO") && r.trim().length() < 6) {
            lblRError.setText("*");
            validR = false;
        } else {
            lblRError.setText("");
            validR = true;
        }

        if (expenditureType.toUpperCase().trim().equals("CUSTEIO") && type.toUpperCase().trim().equals("MELHORIA")) {
            lblExpenditureError.setText("*");
            validExpenditure = false;
        } else {
            lblExpenditureError.setText("");
            validExpenditure = true;
        }
        String status = comboBoxStatus.getSelectedItem().toString();

        if (spinnerConclusion.isEnabled() && status.toUpperCase().trim().equals("CONCLUIDO")) {
            String conclusionDate = sdf.format((Date) spinnerConclusion.getValue());
        }

        if (taDescript.getText().trim().length() == 0) {
            lblDescriptError.setText("*");
            validDescript = false;
        } else {
            lblDescriptError.setText("");
            validDescript = true;
        }
//        System.out.println(validId + "" + validR + validBase + validCity + validFiscal + validAlim + validObjTec
//                + validLocal + validKm + validType + validExpenditure + validDescript); 
        if (status.toUpperCase().trim().equals("ENCERRADO")) {
            if (JOptionPane.showConfirmDialog(this, "Você deseja realmente encerrar o serviço ?", "Encerramento", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                validClose = true;
            } else {
                validClose = false;
            }
        }

        return validId && validR && validBase && validCity && validFiscal && validAlim && validObjTec
                && validLocal && validKm && validType && validExpenditure && validDescript && validClose;

    }

    private void configFields() {

        tbProg.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tbMaterialRequest.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tbReserv.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        txtId.setDocument(new UpperCaseConstraint(15));
        txtLote.setDocument(new OnlyIntNumberConstraint(7));
        txtR.setDocument(new OnlyIntNumberConstraint(7));
        txtReserv.setDocument(new OnlyIntNumberConstraint(9));
        txtBase.setDocument(new OnlyAlphCharConstraint(30));
        txtCity.setDocument(new OnlyAlphCharConstraint(30));
        txtFiscal.setDocument(new MaxLengthConstraint(40));
        txtAlim.setDocument(new UpperCaseConstraint(9));
        txtObjTec.setDocument(new UpperCaseConstraint(8));
        txtLocal.setDocument(new UpperCaseConstraint(8));
        txtKm.setDocument(new DoubleConstraint(8));

        //spinnerCreateDate
        JTextField txtCreateDate = ((JSpinner.DateEditor) spinnerCreateDate.getEditor()).getTextField();
        JSpinnerListener.setFixedLength(txtCreateDate, txtCreateDate.getText().length());
        JSpinnerListener.setDateChangeListener(spinnerCreateDate);

        //spinnerConclusion
        JTextField txtConclusion = ((JSpinner.DateEditor) spinnerConclusion.getEditor()).getTextField();
        JSpinnerListener.setFixedLength(txtConclusion, txtConclusion.getText().length());
        JSpinnerListener.setDateChangeListener(spinnerConclusion);

        txtId.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent e) {
            }

            @Override
            public void keyPressed(KeyEvent e) {
            }

            @Override
            public void keyReleased(KeyEvent e) {
                if (txtId.getText().trim().matches("E(MPM|GDT)|OO(ET|AO|SR) ([\\d]{2,5}|[1-9])/20[\\d]{2}")) {
                    if (!osDao.containsOrderService(ImportServicesFromFile.loadId(txtId.getText().trim()).trim())) {
                        lblIdError.setForeground(Color.green);
                        lblIdError.setText("*");
                    } else {
                        lblIdError.setForeground(Color.red);
                        lblIdError.setText("*");
                    }
                } else {
                    lblIdError.setForeground(Color.red);
                    lblIdError.setText("");
                }
            }
        });
        cbCreateDate.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                if (cbCreateDate.isSelected()) {
                    spinnerCreateDate.setEnabled(true);
                } else {
                    spinnerCreateDate.setEnabled(false);
                }
            }
        });

        comboBoxStatus.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                if (comboBoxStatus.getSelectedItem().toString().equals("CONCLUIDO") && comboBoxStatus.isEnabled()) {
                    spinnerConclusion.setEnabled(true);
                } else {
                    spinnerConclusion.setEnabled(false);
                }
            }
        });
    }

    private void configTables(OrderService os) {
        tbProg.setModel(progTableModel);
        tbProg.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tbMaterialRequest.setModel(requestTableModel);
        tbMaterialRequest.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tbReserv.setModel(reservTableModel);
        tbReserv.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        JDialog materialDialog = new JDialog(this, true);
        materialDialog.setTitle("Material");
        tbReserv.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 2) {

                    MaterialView materialView = new MaterialView(reservTableModel.getReserv(tbReserv.getSelectedRow()));
                    materialDialog.setContentPane(materialView.getContentPane());
                    materialDialog.setSize(materialView.getSize());
                    materialDialog.setVisible(true);

                }
            }

            public void mousePressed(MouseEvent e) {
            }

            public void mouseReleased(MouseEvent e) {
            }

            public void mouseEntered(MouseEvent e) {
            }

            public void mouseExited(MouseEvent e) {
            }

        });
        if (os != null) {
            if (os.getReservsId().trim().length() > 0) {
                reservTableModel.setReservList(new ArrayList<>());
                for (Reserv r : os.getReservs()) {
                    reservTableModel.addReserv(r);
                }

            } else {
                reservTableModel.setReservList(new ArrayList<>());
            }
        }
    }

    private OrderService instantiateOrderService() {
        try {
            String id = ImportServicesFromFile.loadId(txtId.getText());
            if ((!osDao.containsOrderService(id.trim()) && type == OrderServiceFormType.NEW)
                    || type == OrderServiceFormType.EDIT_MODE) {

                OrderService os = new OrderService(id.trim(), txtLote.getText().trim(),
                        txtAlim.getText().trim(), txtBase.getText().trim().toUpperCase(),
                        ServiceType.valueOf(comboBoxType.getSelectedItem().toString()),
                        txtObjTec.getText().trim(), txtLocal.getText().trim(),
                        taDescript.getText().trim(), new Date());
                os.setR(txtR.getText().trim());
                for (Reserv reserv : reservTableModel.getReservList()) {
                    reserv.setService(os);
                    os.addReserv(reserv);
                }
                if (cbCreateDate.isSelected()) {
                    os.setCreateDate((Date) spinnerCreateDate.getValue());
                } else {
                    os.setCreateDate(null);
                }
                os.setCity(txtCity.getText().trim().toUpperCase());
                os.setFiscal(txtFiscal.getText().trim());
                os.setUnlockKm(Double.parseDouble(txtKm.getText().trim()));
                os.setExpenditureType(ExpenditureType.valueOf(comboBoxExpenditure.getSelectedItem().toString()));
                os.setStatusService(StatusService.valueOf(comboBoxStatus.getSelectedItem().toString()));
                if (comboBoxStatus.getSelectedItem().toString().trim().equals("ENCERRADO")) {
                    os.setCloseDate(new Date());
                }
                if (spinnerConclusion.isEnabled()) {
                    os.setConclusionDate((Date) spinnerConclusion.getValue());
                }

                return os;

            } else {
                if (type == OrderServiceFormType.NEW) {
                    JOptionPane.showMessageDialog(this, "Serviço já cadastrado!");
                }
                return null;
            }
        } catch (DbException e) {
            JOptionPane.showMessageDialog(this, "Erro na comunicação com o banco de dados: " + e.getMessage());
        }
        return null;
    }

    public int insertOrderService(OrderService os) {
        try {
            return osDao.insertOrderService(os);
        } catch (DbException e) {
            JOptionPane.showMessageDialog(this, "Erro na comunicação com o banco de dados: " + e.getMessage());
        }
        return -1;
    }

    private void createMaterialRequestView(JFrame parentFrame) {
        JDialog requestView = new JDialog(parentFrame, true);
        requestView.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
        requestView.setLocationRelativeTo(null);
        MaterialRequestView mrv = new MaterialRequestView(this.os, this);
        requestView.setContentPane(mrv.getContentPane());
        requestView.setSize(mrv.getSize());
        requestView.setLocationRelativeTo(null);
        requestView.setVisible(true);
    }

    private void loadRequestMaterialList(OrderService os) {
        MaterialDao materialDao = DaoFactory.createMaterialDao();
        Map<String, RequestMaterial> reqMaterial = new HashMap<>();
        List<RequestMaterial> requestMaterial = new ArrayList<>();
        for (RequestMaterial material : os.getRequest()) {
            if (material.isStructure()) {
                Structure sttr = new Structure(Long.parseLong(material.getCode()), material.getDescription());
                materialDao.findStructureMaterial(sttr, os.getId());
                sttr.getMaterials().forEach(m -> m.setRequestQuantity(m.getRequestQuantity() * material.getRequestQuantity()));
                    for (RequestMaterial mat : sttr.getMaterials()) {
                        if (reqMaterial.containsKey(mat.getCode())) {
                            reqMaterial.get(mat.getCode()).setRequestQuantity(reqMaterial.get(mat.getCode()).getRequestQuantity() + mat.getRequestQuantity());
                        } else {
                            reqMaterial.put(mat.getCode(), mat);
                        }
                    }
            } else {
                if (reqMaterial.containsKey(material.getCode())) {
                    reqMaterial.get(material.getCode()).setRequestQuantity(reqMaterial.get(material.getCode()).getRequestQuantity() + material.getRequestQuantity());
                } else {
                    reqMaterial.put(material.getCode(), material);
                }
            }
        }
        for (String key : reqMaterial.keySet()) {
            requestMaterial.add(reqMaterial.get(key));
        }
        requestTableModel.setRequestMaterial(requestMaterial);
    }

    @Override
    public void onDataChange(Object obj) {
        loadRequestMaterialList(this.os);
    }

}
